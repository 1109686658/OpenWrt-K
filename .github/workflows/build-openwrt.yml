#=============================================================================#
#MIT License

#Copyright (c) 2023 沉默の金

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.
#=============================================================================#

name: Build OpenWrt-K
on:
  schedule:
    - cron: '0 4 * * *'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
permissions:
  contents: write
  discussions: write
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
          
      - name: 将存储库签出到运行器
        uses: actions/checkout@v3
      
      - name: 建立工作文件夹
        run:  |
          cd $GITHUB_WORKSPACE
          sudo mkdir -p workspace
          sudo chown $USER:$GROUPS workspace
          cd workspace
          export WORKSPACE_ROOT_PATH="$(pwd)"
          echo "WORKSPACE_ROOT_PATH=$WORKSPACE_ROOT_PATH" >> $GITHUB_ENV
          mkdir -p package
          cd package
          export PACKAGE_ROOT_PATH="$(pwd)"
          echo "PACKAGE_ROOT_PATH=$PACKAGE_ROOT_PATH" >> $GITHUB_ENV
          mkdir -p chen
          mkdir -p cmzj_package
          
      - name: 下载源代码
        working-directory:  ${{ env.WORKSPACE_ROOT_PATH }}
        run: |
          mkdir -p openwrt
          cd openwrt
          export OPENWRT_ROOT_PATH="$(pwd)"
          echo "OPENWRT_ROOT_PATH=$OPENWRT_ROOT_PATH" >> $GITHUB_ENV
      
      - name: test
        run: |
          mkdir -p ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/x86/64
          mkdir -p ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/x86/64/packages
          cp ./config/target.config  $OPENWRT_ROOT_PATH/bin/targets/x86/64
          cp ./config/luci.config  $OPENWRT_ROOT_PATH/bin/targets/x86/64
          cp ./config/utilities.config  $OPENWRT_ROOT_PATH/bin/targets/x86/64
          cp ./config/network.config  $OPENWRT_ROOT_PATH/bin/targets/x86/64
          cp ./config/other.config  $OPENWRT_ROOT_PATH/bin/targets/x86/64
          cp ./config/kmod.config  $OPENWRT_ROOT_PATH/bin/targets/x86/64
          cp ./config/image.config  $OPENWRT_ROOT_PATH/bin/targets/x86/64
          
      
      - name: 上传日志
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: x86-64-logs
          path: "${{ env.OPENWRT_ROOT_PATH }}/logs"

      - name: 准备 artifact
        if: failure()
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      
      - name: 删除packages
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          cd ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/x86/64
          rm -rf packages
      
      - name: 上传 buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-buildinfo
          path: ${{ env.OPENWRT_ROOT_PATH }}/artifact/buildinfo/

      - name: 上传 package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-package
          path: ${{ env.OPENWRT_ROOT_PATH }}/artifact/package/

      - name: 上传 firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-firmware
          path: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/
Upload:
    needs: build
    runs-on: ubuntu-22.04

    steps:
      - name: 将存储库签出到运行器
        uses: actions/checkout@v3

      - name: 建立工作文件夹
        run:  |
          cd $GITHUB_WORKSPACE
          sudo mkdir -p upload
          sudo chown $USER:$GROUPS upload
          cd upload
          export UPLOAD_ROOT_PATH="$(pwd)"
          echo "UPLOAD_ROOT_PATH=$UPLOAD_ROOT_PATH" >> $GITHUB_ENV

      - name: 初始化环境
        run: |
          sudo -E apt update
          sudo apt install -y install git aria2 zip bzip2 curl rsync unzip wget
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p update
          sudo chown $USER:$GROUPS update
          cd update

      - name: 生成 release tag
        id: tag
        working-directory: ${{ env.UPLOAD_ROOT_PATH }}
        run: |
          echo 编译于$(date +"%Y-%m-%d %H:%M") >> release.txt
          export RELEASE_NAME="OpenWrt-K_V$(date +"%y.%m.%d-%H")"
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo ${{ env.RELEASE_NAME }} >> $GITHUB_OUTPUT
          echo ${{ env.RELEASE_NAME }}
          echo ${{ steps.tag.outputs.release_tag }}

      - name: 下载固件
        uses: actions/download-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ${{ env.UPLOAD_ROOT_PATH }}
          
      - name: 上传到 Release
        id: release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: ${{ env.RELEASE_NAME }}
          files: ${{ env.UPLOAD_ROOT_PATH }}/x86/64/*
          body_path: ${{ env.UPLOAD_ROOT_PATH }}/release.txt
          
      - name: 删除旧的Releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
