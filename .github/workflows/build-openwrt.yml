#=============================================================================#
#MIT License
#Copyright (c) 2023 沉默の金
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.
#=============================================================================#
name: Build OpenWrt-K
on:
  schedule:
    - cron: '0 4 * * *'
  push:
    paths:
    branches:    
      - main
      - 'config/**'
      - '.github/**'
      - 'files/**'
  pull_request:
            paths:
              - 'config/**'
              - '.github/**'
              - 'files/**'
     branches:    
      - main
      - 'config/**'
      - '.github/**'
      - 'files/**'
  workflow_dispatch:
permissions:
  contents: write
@@ -203,7 +205,7 @@ jobs:
          mkdir -p ./openwrt/package/libs/libnftnl/patches/
          mkdir -p ./openwrt/package/network/utils/nftables/patches/
          cp -r ./package/chen/turboacc/firewall4-7ae5e14bbd7265cc67ec870c3bb0c8e197bb7ca9/firewall4/patches/* ./openwrt/package/network/config/firewall4/patches
          cp -r ./package/chen/turboacc/libs-1.2.1/libnftnl/patches/* ./openwrt/package/libs/libnftnl/patches
          cp -r ./package/chen/turboacc/libnftnl-1.2.1/libnftnl/patches/* ./openwrt/package/libs/libnftnl/patches
          cp -r ./package/chen/turboacc/nftables-1.0.2/nftables/patches/* ./openwrt/package/network/utils/nftables/patches
          sed -i '/PKG_FIXUP:=autoreconf/'d ./openwrt/package/libs/libnftnl/Makefile
          sed -i '/^PKG_INSTALL:/i\PKG_FIXUP:=autoreconf' ./openwrt/package/libs/libnftnl/Makefile
          echo "libnftnl-Makefile"
          cat ./openwrt/package/libs/libnftnl/Makefile
          echo "firewall4-patches"
          cd ./openwrt/package/network/config/firewall4/patches
          ls
          echo "libnftnl-patches"
          cd $OPENWRT_ROOT_PATH/package/libs/libnftnl/patches/
          ls
          echo "nftables-patches"
          cd $OPENWRT_ROOT_PATH/package/network/utils/nftables/patches/
          ls
          echo "hack-5.10" 
          cd $OPENWRT_ROOT_PATH/target/linux/generic/hack-5.10
          ls
          cd $WORKSPACE_ROOT_PATH
          rm -rf ./package
          sed -i '$a CONFIG_SHORTCUT_FE=y' ./openwrt/target/linux/generic/config-5.10
          sed -i '$a # CONFIG_MERAKI_MX100 is not set' ./openwrt/target/linux/generic/config-5.10 
      
      - name: 修复问题
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          sed -i 's/-full//' ./include/target.mk 
          sed -i 's/dnsmasq/dnsmasq-full/g' ./include/target.mk 
          sed -i 's/256/1024/' ./target/linux/x86/image/Makefile                
      
      - name: 更新 feeds 
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      
      - name: 更新smartdns
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          WORKINGDIR="`pwd`/feeds/packages/net/smartdns"
          mkdir $WORKINGDIR -p
          rm $WORKINGDIR/* -fr
          wget https://github.com/pymumu/openwrt-smartdns/archive/master.zip -O $WORKINGDIR/master.zip
          unzip $WORKINGDIR/master.zip -d $WORKINGDIR
          mv $WORKINGDIR/openwrt-smartdns-master/* $WORKINGDIR/
          rmdir $WORKINGDIR/openwrt-smartdns-master
          rm $WORKINGDIR/master.zip
          LUCIBRANCH="master" #更换此变量
          WORKINGDIR="`pwd`/feeds/luci/applications/luci-app-smartdns"
          mkdir $WORKINGDIR -p
          rm $WORKINGDIR/* -fr
          wget https://github.com/pymumu/luci-app-smartdns/archive/${LUCIBRANCH}.zip -O $WORKINGDIR/${LUCIBRANCH}.zip
          unzip $WORKINGDIR/${LUCIBRANCH}.zip -d $WORKINGDIR
          mv $WORKINGDIR/luci-app-smartdns-${LUCIBRANCH}/* $WORKINGDIR/
          rmdir $WORKINGDIR/luci-app-smartdns-${LUCIBRANCH}
          rm $WORKINGDIR/${LUCIBRANCH}.zip
      
      - name: 安装 feeds 
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: ./scripts/feeds install -a
      - name: 复制自定义文件并加载自定义配置
        run: |
          cp -r files $OPENWRT_ROOT_PATH/files
          chmod 755 $OPENWRT_ROOT_PATH/files/usr/bin/AdGuardHome/AdGuardHome
          chmod 755 $OPENWRT_ROOT_PATH/files/etc/uci-defaults/99_chenmozhijin
          cat ./config/target.config >> $OPENWRT_ROOT_PATH/.config
          cat ./config/luci.config >> $OPENWRT_ROOT_PATH/.config
          cat ./config/utilities.config >> $OPENWRT_ROOT_PATH/.config
          cat ./config/network.config >> $OPENWRT_ROOT_PATH/.config
          cat ./config/other.config >> $OPENWRT_ROOT_PATH/.config
          cat ./config/kmod.config >> $OPENWRT_ROOT_PATH/.config
          cat ./config/image.config >> $OPENWRT_ROOT_PATH/.config
      
      - name: 更新AdGuardHome核心
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          mkdir -p ./files/usr/bin/AdGuardHome/tmp
          rm ./files/usr/bin/AdGuardHome/tmp/* -fr        
          latest_ver="$(curl https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest 2>/dev/null|grep -E 'tag_name' |grep -E 'v[0-9.]+' -o 2>/dev/null)"
          Archt="$(rm -rf Archt && sed -n '/^CONFIG_TARGET_.*=y/p' .config > Archt0 && sed -n '/^CONFIG_TARGET_.*_.*=y/!p' Archt0 > Archt && rm Archt0 && sed -i 's/CONFIG_TARGET_//' Archt && sed -i 's/=y//' Archt && cat Archt)"
          case $Archt in
          "i386")
          Arch="386"
          ;;
          "i686")
          Arch="386"
          ;;
          "x86")
          Arch="amd64"
          ;;
          "mipsel")
          Arch="mipsle"
          ;;
          "mips64el")
          Arch="mips64le"
          Arch="mipsle"
          echo -e "mips64el use $Arch may have bug" 
          ;;
          "mips")
          Arch="mips"
          ;;
          "mips64")
          Arch="mips64"
          Arch="mips"
          echo -e "mips64 use $Arch may have bug" 
          ;;
          "arm")
          Arch="arm"
          ;;
          "aarch64")
          Arch="arm64"
          ;;
          "powerpc")
          Arch="ppc"
          echo -e "error not support $Archt" 
          EXIT 1
          ;;
          "powerpc64")
          Arch="ppc64"
          echo -e "error not support $Archt" 
          EXIT 1
          ;;
          *)
          echo -e "error not support $Archt if you can use offical release please issue a bug" 
          EXIT 1
          ;;
          esac
          wget https://github.com/AdguardTeam/AdGuardHome/releases/download/${latest_ver}/AdGuardHome_linux_${Arch}.tar.gz -O ./files/usr/bin/AdGuardHome/tmp/AdGuardHome.tar.gz
          tar -zxf "./files/usr/bin/AdGuardHome/tmp/AdGuardHome.tar.gz" -C "./files/usr/bin/AdGuardHome/tmp/"
          mv -f ./files/usr/bin/AdGuardHome/tmp/AdGuardHome/AdGuardHome ./files/usr/bin/AdGuardHome
          rm -rf ./files/usr/bin/AdGuardHome/tmp
          chmod 755 $OPENWRT_ROOT_PATH/files/usr/bin/AdGuardHome/AdGuardHome
      
      - name: 生成配置文件
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          make defconfig
          ./scripts/diffconfig.sh          
      
      - name: 检查剩余空间
        run:  |
          echo "======================="
          echo "空间使用情况:"
          echo "======================="
          df -h
          echo "======================="
      
      - name: 下载 dl 库
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          make download -j16
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          make download -j16 || make download -j1 V=s
      
      - name: 构建工具
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          make tools/install -j$(nproc) || make tools/install -j1 V=s
          echo "======================="
          echo "空间使用情况:"
          echo "======================="
          df -h
          echo "======================="
  
      - name: 构建工具链
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          make toolchain/install -j$(nproc) || make toolchain/install -j1 V=s
          echo "======================="
          echo "空间使用情况:"
          echo "======================="
          df -h
          echo "======================="
      
      - name: 构建内核
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          make target/compile -j$(nproc) || make target/compile -j$(nproc) || make target/compile -j1 V=s
          echo "======================="
          echo "空间使用情况:"
          echo "======================="
          df -h
          echo "======================="
      
      - name: 构建内核模块
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          make package/linux/compile -j$(nproc) || make package/linux/compile -j$(nproc) V=s || make package/linux/compile -j1 V=s
          echo "======================="
          echo "空间使用情况:"
          echo "======================="
          df -h
          echo "======================="
      
      - name: 编译固件 
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          make -j$(nproc) || make -j$(nproc) V=s || make -j1 V=s
          echo "======================="
          echo "空间使用情况:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
      
      - name: 上传日志
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: x86-64-logs
          path: "${{ env.OPENWRT_ROOT_PATH }}/logs"
      - name: 准备 artifact
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      
      - name: 删除packages
        working-directory: ${{ env.OPENWRT_ROOT_PATH }}
        run: |
          cd ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/x86/64
          rm -rf packages
      
      - name: 上传 buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-buildinfo
          path: ${{ env.OPENWRT_ROOT_PATH }}/artifact/buildinfo/
      - name: 上传 package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-package
          path: ${{ env.OPENWRT_ROOT_PATH }}/artifact/package/
      - name: 上传 firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-firmware
          path: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/
  Upload:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: 将存储库签出到运行器
        uses: actions/checkout@v3
      - name: 建立工作文件夹
        run:  |
          cd $GITHUB_WORKSPACE
          sudo mkdir -p upload
          sudo chown $USER:$GROUPS upload
          cd upload
          export UPLOAD_ROOT_PATH="$(pwd)"
          echo "UPLOAD_ROOT_PATH=$UPLOAD_ROOT_PATH" >> $GITHUB_ENV
      - name: 初始化环境
        run: |
          sudo -E apt update
          sudo -E apt install -y git aria2 zip bzip2 curl rsync unzip wget
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p update
          sudo chown $USER:$GROUPS update
          cd update
      - name: 生成 release tag
        id: tag
        working-directory: ${{ env.UPLOAD_ROOT_PATH }}
        run: |
          echo 编译于$(date +"%Y-%m-%d %H:%M") >> release.txt
          export RELEASE_NAME="OpenWrt-K_V$(date +"%y.%m.%d-%H")"
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo ${{ env.RELEASE_NAME }} >> $GITHUB_OUTPUT
          echo ${{ env.RELEASE_NAME }}
          echo ${{ steps.tag.outputs.release_tag }}
      - name: 下载固件
        uses: actions/download-artifact@v3
        with:
          name: OpenWrt-firmware
          path: ${{ env.UPLOAD_ROOT_PATH }}
          
      - name: 上传到 Release
        id: release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: ${{ env.RELEASE_NAME }}
          files: ${{ env.UPLOAD_ROOT_PATH }}/x86/64/*
          body_path: ${{ env.UPLOAD_ROOT_PATH }}/release.txt
          
      - name: 删除旧的Releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
